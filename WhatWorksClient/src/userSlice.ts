import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from './store';

export interface Review { 
  title: string; 
  review: string; 
  imageURL: string; 
  tags: string; 
}


export interface UserState {
  username: 'kathy123' | 'ahsieh22';
  status: 'idle' | 'loading' | 'failed';
  liked: {[key: number]: Review};
  disliked: {[key: number]: Review};
  profilePhoto: string; 

}

const initialState: UserState = {
  username: 'ahsieh22',
  status: 'idle',
  liked: {}, 
  disliked: {}, 
  profilePhoto: 'https://firebasestorage.googleapis.com/v0/b/whatworks-ac068.appspot.com/o/ahsieh22?alt=media&token=56e228c8-1eec-443f-88eb-1c3de3d38475'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    initializeLiked(state,action) {
      let newLiked = action.payload; 
      state.liked = newLiked;
 
    }, 
    initializeDisliked(state,action) { 
      let newdisliked = action.payload; 
      state.disliked = newdisliked;
    }, 
    switchUser(state) { 
      state.username === 'ahsieh22' ? state.username = 'kathy123' : state.username= 'ahsieh22'; 
      state.liked = [];
      state.disliked = [];
    }, 
    switchPhoto(state, action) { 
      state.profilePhoto = action.payload; 
    }

    
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   })
    //   .addCase(incrementAsync.rejected, (state) => {
    //     state.status = 'failed';
    //   });
  },
});

export const { initializeLiked, initializeDisliked, switchUser, switchPhoto } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsername = (state: RootState) => state.user.username;
export const selectLiked = (state: RootState) => state.user.liked;
export const selectDisliked = (state: RootState) => state.user.disliked;
export const selectPhoto = (state: RootState) => state.user.profilePhoto; 

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;

